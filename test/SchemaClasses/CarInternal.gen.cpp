// Auto-generated by SchemaClassGenerator - Do not manually edit!
#include "CarInternal.gen.h"
#include "EnumSomeEnum.gen.h"

#include <json/json.h>

using namespace SchemaClasses;
using namespace std;

void CarInternal::Deserialize(Json::Value& jsonObj)
{
	StringField = jsonObj["StringField"].asString();
	IntField = jsonObj["IntField"].asInt();
	LongField = (long)jsonObj["LongField"].asInt64();
	FloatField = jsonObj["FloatField"].asFloat();
	DoubleField = jsonObj["DoubleField"].asDouble();
	EnumField = SomeEnumFromString(jsonObj["EnumField"].asString());
	{
		auto& arr = jsonObj["ArrayField"];
		ArrayField.clear();
		ArrayField.reserve(arr.size());
		for(auto& elem : arr)
		{
			ArrayField.push_back(elem.asString());
		};
	};
};

void CarInternal::Serialize(Json::Value& jsonObj)
{
	jsonObj["StringField"] = Json::Value(StringField);
	jsonObj["IntField"] = Json::Value(IntField);
	jsonObj["LongField"] = Json::Value((Json::Int64)LongField);
	jsonObj["FloatField"] = Json::Value(FloatField);
	jsonObj["DoubleField"] = Json::Value(DoubleField);
	jsonObj["EnumField"] = SomeEnumToString(EnumField);
	{
		auto arr = Json::Value(Json::arrayValue);
		for(auto& elem : ArrayField)
		{
			arr.append(Json::Value(elem));
		};
		jsonObj["ArrayField"] = arr;
	};
};

void CarInternal::Destroy()
{
};
